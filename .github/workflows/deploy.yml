name: Backend CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/youthjob
  CONTAINER_NAME: spring-app
  PORT: "8080"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21 (Temurin) & Gradle cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # application.yml 생성 (Secret 값 삽입)
      - name: Create application.yml
        run: |
          mkdir -p ./src/main/resources
          cat > ./src/main/resources/application.yml <<'EOF'
          ${{ secrets.APPLICATION_YML }}
          EOF
          echo "===== application.yml ====="
          sed -n '1,60p' ./src/main/resources/application.yml

      - name: Build
        run: ./gradlew clean build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image (tag with sha & latest)
        run: |
          docker build -t "$IMAGE_NAME:${{ github.sha }}" -t "$IMAGE_NAME:latest" .

      - name: Push Docker image
        run: |
          docker push "$IMAGE_NAME:${{ github.sha }}"
          docker push "$IMAGE_NAME:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout (for scp source)
        uses: actions/checkout@v4

      # 1) EC2에 /opt/monitoring 디렉터리 준비(권한 부여)
      - name: Prepare /opt/monitoring on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            sudo mkdir -p /opt/monitoring
            sudo chown $USER:$USER /opt/monitoring

      # 2) Prometheus 설정 파일 업로드
      - name: Upload prometheus.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "deploy/prometheus.yml"
          target: "/opt/monitoring/"
          overwrite: true

      # 3) App + Prometheus + Grafana 기동
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail

            IMAGE="${{ env.IMAGE_NAME }}"
            TAG="${{ github.sha }}"
            NAME="${{ env.CONTAINER_NAME }}"
            PORT="${{ env.PORT }}"
            PROM_FILE="/opt/monitoring/prometheus.yml"

            # 네트워크
            docker network create monnet 2>/dev/null || true

            # 이미지 pull
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            docker pull "$IMAGE:$TAG"

            # 기존 컨테이너 정리
            docker rm -f "$NAME" prometheus grafana 2>/dev/null || true

            # App
            docker run -d \
              --name "$NAME" \
              --restart unless-stopped \
              --network monnet \
              -p "${PORT}:8080" \
              "$IMAGE:$TAG"

            # Prometheus
            docker run -d \
              --name prometheus \
              --restart unless-stopped \
              --network monnet \
              -v "$PROM_FILE":/etc/prometheus/prometheus.yml:ro \
              -v prometheus-data:/prometheus \
              -p 9090:9090 \
              prom/prometheus:latest \
              --config.file=/etc/prometheus/prometheus.yml \
              --storage.tsdb.retention.time=15d

            # Grafana
            docker run -d \
              --name grafana \
              --restart unless-stopped \
              --network monnet \
              -e GF_SECURITY_ADMIN_USER=admin \
              -e GF_SECURITY_ADMIN_PASSWORD='${{ secrets.GRAFANA_ADMIN_PASSWORD }}' \
              -v grafana-data:/var/lib/grafana \
              -p 3000:3000 \
              grafana/grafana:latest

            # (참고) 헬스체크는 불안정하여 제거함
            # curl -fsS http://localhost:${PORT}/actuator/health
